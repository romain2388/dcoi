/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminProjectsRouteImport } from './routes/admin/projects'
import { Route as AdminProjectsProjectIdRouteImport } from './routes/admin/projects.$projectId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProjectsRoute = AdminProjectsRouteImport.update({
  id: '/admin/projects',
  path: '/admin/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminProjectsProjectIdRoute = AdminProjectsProjectIdRouteImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => AdminProjectsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/projects': typeof AdminProjectsRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/admin/projects/$projectId': typeof AdminProjectsProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/projects': typeof AdminProjectsRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/admin/projects/$projectId': typeof AdminProjectsProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/projects': typeof AdminProjectsRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/projects/$projectId': typeof AdminProjectsProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin/projects' | '/admin' | '/admin/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin/projects' | '/admin' | '/admin/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/admin/projects'
    | '/admin/'
    | '/admin/projects/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminProjectsRoute: typeof AdminProjectsRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/projects': {
      id: '/admin/projects'
      path: '/admin/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/projects/$projectId': {
      id: '/admin/projects/$projectId'
      path: '/$projectId'
      fullPath: '/admin/projects/$projectId'
      preLoaderRoute: typeof AdminProjectsProjectIdRouteImport
      parentRoute: typeof AdminProjectsRoute
    }
  }
}

interface AdminProjectsRouteChildren {
  AdminProjectsProjectIdRoute: typeof AdminProjectsProjectIdRoute
}

const AdminProjectsRouteChildren: AdminProjectsRouteChildren = {
  AdminProjectsProjectIdRoute: AdminProjectsProjectIdRoute,
}

const AdminProjectsRouteWithChildren = AdminProjectsRoute._addFileChildren(
  AdminProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminProjectsRoute: AdminProjectsRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
